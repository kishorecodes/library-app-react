{"version":3,"sources":["Components/NavBar.js","Components/Books.js","Components/CheckOut.js","Components/Cart.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","state","search","onChangeEvent","e","setState","target","value","props","filterBooks","count","this","cart","length","Navbar","bg","variant","alt","src","width","height","className","to","Brand","Nav","Form","inline","FormControl","type","placeholder","onChange","Button","outline","Component","Books","book","searched","fullDate","Date","date","getDate","month","getMonth","year","getFullYear","booksList","filter","l","title","toLowerCase","includes","author","genre","yop","toString","map","key","id","Media","left","img","body","heading","availability","Badge","pill","color","onClick","addToCart","style","border","CheckOut","finalCart","arr","i","resetStateToApp","float","Cart","resetCartState","splice","updateCart","result","li","Table","responsive","removeFromCart","Math","abs","Alert","textAlign","App","books","alert","axios","get","then","response","console","log","data","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d66a3b97.chunk.js","sourcesContent":["import React,{ Component } from 'react';\nimport {Navbar, Nav, Button, Form, FormControl} from 'react-bootstrap';\nimport {NavLink} from 'react-router-dom';\n\nclass NavBar extends Component{\n    state = {\n        search: \"\"\n    }\n\n    onChangeEvent = (e) => {\n        this.setState({\n            search: e.target.value\n        })\n        this.props.filterBooks(this.state.search)\n    }\n\n    render(){\n        const count = this.props.cart.length\n    return(\n        <div>\n            <Navbar bg=\"primary\" variant=\"dark\">\n                <img\n                alt=\"logo\"\n                src=\"https://i.pinimg.com/originals/2c/fc/93/2cfc93d7665f5d7728782700e50596e3.png\"\n                width=\"30\"\n                height=\"30\"\n                className=\"d-inline-block align-top\" />\n                <NavLink to=\"/library-app-react/\"><Navbar.Brand>Library</Navbar.Brand></NavLink>\n                <Nav className=\"mr-auto\"></Nav>\n                <Form inline>\n                    <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" onChange={this.onChangeEvent}/>\n                </Form>\n                <NavLink to=\"/cart\"><Button variant=\"outline-light\" outline>Cart: {count}</Button></NavLink>\n            </Navbar>\n        </div>\n    )\n    }\n}\nexport default NavBar;","import React, { Component } from 'react';\nimport { Media, Button } from 'reactstrap';\nimport {Badge} from 'react-bootstrap';\n\nclass Books extends Component{\n    render() {\n        const { book,searched } = this.props\n        const fullDate = new Date()\n        const date = fullDate.getDate() + 3\n        const month = fullDate.getMonth() + 1\n        const year = fullDate.getFullYear()\n        const filterBook = book.filter(l => {\n            return l.title.toLowerCase().includes(searched.toLowerCase()) ||\n                   l.author.toLowerCase().includes(searched.toLowerCase()) || \n                   l.genre.toLowerCase().includes(searched.toLowerCase()) ||\n                   l.yop.toString().includes(searched.toString()) ||\n                   !l\n          })\n        const booksList = filterBook.map(book => {\n            return(\n                <div key={book.id}>\n                    <Media>\n                        <Media left>\n                            <Media \n                            src={book.img} \n                            alt=\"book\" />\n                        </Media>\n                        <Media body>\n                            <Media heading>{book.title}</Media>\n                            <Media>Genre: {book.genre}</Media><br />\n                            <Media>Written By: {book.author}</Media><br />\n                            <Media>Published on: {book.yop}</Media><br />\n                            {(book.availability === true) ? \n                            <Badge pill variant=\"success\">Available</Badge> \n                            : \n                            <Badge pill variant=\"danger\">Not Available. Only Available on {date}/{month}/{year}</Badge>\n                            }<br />\n                            {(book.availability === true) ? <Button color=\"primary\" onClick={() => this.props.addToCart(book.id)}>Add To Cart</Button> : null}\n                        </Media>\n                    </Media>\n                    <hr style={{border: \"1px dashed black\"}}/>\n                </div>\n            )\n        })\n        return (\n            <div>\n                {booksList}\n            </div>\n        )\n    }\n}\nexport default Books;","import React,{ Component } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { Button } from 'react-bootstrap';\n\nclass CheckOut extends Component{\n    state = {\n        book: this.props.book,\n        cart: []\n    }\n\n    finalCart = (arr,book) => {\n        for( let i = 0; i < arr.length; i++){\n            let temp = arr[i] - 1\n            book[temp].availability = false\n            this.setState({\n                book\n            })\n        }\n        this.props.resetStateToApp()\n        \n    }\n\n    render(){\n        return(\n            <div>\n                <NavLink to=\"/library-app-react/\"><Button style={{float:\"right\"}} variant=\"outline-primary\" onClick={() => {this.finalCart(this.props.cart,this.state.book)}}>Proceed To CheckOut</Button></NavLink>\n            </div>\n        )\n    }\n}\nexport default CheckOut;","import React, { Component } from 'react';\nimport { Button } from 'reactstrap';\nimport {Alert, Table} from 'react-bootstrap';\nimport CheckOut from './CheckOut';\n\nclass Cart extends Component{\n    state = {\n        cart: this.props.cart\n    }\n\n    removeFromCart(id){\n        for( let i = 0; i < this.props.cart.length; i++){ \n            if ( this.props.cart[i] === id) {\n              this.props.cart.splice(i, 1);\n              this.setState({\n                  cart: this.state.cart\n              })\n            }\n         }\n         this.props.updateCart(this.state.cart)\n    }\n\n    resetStateToApp = () => {\n        this.props.resetCartState()\n    }\n\n    render(){\n\n        const lists = this.props.book.filter(l => {\n            return l.id === this.state.cart[0] || l.id === this.state.cart[1] || l.id === this.state.cart[2]\n        })\n\n        const result = lists.map(li => {\n            return(\n                <div key={li.id}>\n                    <Table responsive>\n                        <tbody>\n                            <tr>\n                            <td><img src={li.img} width=\"70px\" height=\"120px\" alt=\"book\"/></td>\n                            <td>{li.title}</td>\n                            <td>{li.author}</td>\n                            <td>{li.genre}</td>\n                            <td>{li.yop}</td>\n                            <td><Button style={{float: \"right\"}} onClick={() => this.removeFromCart(li.id)}>Remove</Button></td>\n                            </tr>\n                        </tbody>\n                    </Table>\n                </div>\n            )\n        })\n\n        const length = Math.abs(this.state.cart.length - 3)\n\n        return(\n            <div>\n                <Alert variant=\"success\" style={{textAlign: \"center\"}}>You can add {length} book to your cart</Alert>\n                {result}\n                <CheckOut book={this.props.book} cart={this.state.cart} resetStateToApp={this.resetStateToApp}/>\n            </div>\n        )\n    }\n}\nexport default Cart;","import React,{ Component } from 'react';\nimport NavBar from './Components/NavBar';\nimport Books from './Components/Books';\nimport axios from 'axios'\nimport Cart from './Components/Cart';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\nclass App extends Component{\n  state = {\n    books: [],\n    cart: [],\n    search: \"\"\n  }\n\n  componentDidMount() {\n    axios.get('https://my-json-server.typicode.com/kishorecodes/jsonserver/books')\n      .then(response => {\n        console.log(response.books)\n        this.setState({\n          books: response.data\n        })\n      })\n  }\n\n  addToCart = id => {\n    const count = this.state.cart.length\n    if(count < 3){\n    this.setState({\n      cart: [...this.state.cart,id]\n    })\n    \n  } else {\n    alert(\"Maximum three books allowed per user.Proceed to Checkout\")\n  }\n}\n\n  resetCartState = () => {\n    this.setState({\n      cart: []\n    })\n  }\n\n  updateCart = (arr) => {\n    this.setState({\n      cart: arr\n    })\n  }\n  \n  filterBooks = (result) => {\n    this.setState({\n      search: result\n    })\n  }\n\n  render() {\n    return (\n      <Router>\n      <div>\n        <NavBar cart={this.state.cart} filterBooks={this.filterBooks}/>\n        <Route exact path=\"/library-app-react/\" render={() => (<Books book={this.state.books} addToCart={this.addToCart} searched={this.state.search} />)} />\n        <Route path=\"/cart\" render={() => (<Cart cart={this.state.cart} book={this.state.books} updateCart={this.updateCart} resetCartState={this.resetCartState} />)}/>\n      </div>\n      </Router>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}